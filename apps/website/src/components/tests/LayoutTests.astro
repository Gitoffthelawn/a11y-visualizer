---
import CategoryTitle from "./CategoryTitle.astro";
import CategorySectionTitle from "./CategorySectionTitle.astro";
import ExampleCard from "./ExampleCard.astro";
import { createLocalT } from "../../lib/i18n";
import { en, ja } from "./LayoutTests.lang";

interface Props {
  lang?: string;
}
const lang = (Astro.props as Props).lang || "en";
const t = createLocalT(lang === "ja" ? ja : en, en);
---

<CategoryTitle id="layout">{t("title")}</CategoryTitle>
<p class="text-zinc-700 dark:text-zinc-300 mb-6">{t("intro")}</p>

<CategorySectionTitle id="semantic-sections"
  >{t("sections.semantic.title")}</CategorySectionTitle
>

<ExampleCard
  title={t("examples.semantic.html5.title")}
  description={t("examples.semantic.html5.desc")}
>
  <blockquote class="space-y-4 text-zinc-900 dark:text-zinc-100">
    <header class="bg-teal-100 dark:bg-teal-900 p-3 rounded">
      <strong>&lt;header&gt;</strong> - Page or section header
    </header>
    <nav class="bg-blue-100 dark:bg-blue-900 p-3 rounded">
      <strong>&lt;nav&gt;</strong> - Navigation links
    </nav>
    <main class="bg-green-100 dark:bg-green-900 p-3 rounded">
      <strong>&lt;main&gt;</strong> - Main content area
    </main>
    <aside class="bg-purple-100 dark:bg-purple-900 p-3 rounded">
      <strong>&lt;aside&gt;</strong> - Sidebar or supplementary content
    </aside>
    <footer class="bg-gray-100 dark:bg-gray-900 p-3 rounded">
      <strong>&lt;footer&gt;</strong> - Page or section footer
    </footer>
  </blockquote>
</ExampleCard>

<CategorySectionTitle id="aria-landmarks"
  >{t("sections.landmarks.title")}</CategorySectionTitle
>

<ExampleCard
  title={t("examples.landmarks.roles.title")}
  description={t("examples.landmarks.roles.desc")}
>
  <blockquote class="space-y-4 text-zinc-900 dark:text-zinc-100">
    <div role="banner" class="bg-teal-100 dark:bg-teal-900 p-3 rounded">
      <strong>role="banner"</strong> - Equivalent to &lt;header&gt;
    </div>
    <div role="navigation" class="bg-blue-100 dark:bg-blue-900 p-3 rounded">
      <strong>role="navigation"</strong> - Equivalent to &lt;nav&gt;
    </div>
    <div role="main" class="bg-green-100 dark:bg-green-900 p-3 rounded">
      <strong>role="main"</strong> - Equivalent to &lt;main&gt;
    </div>
    <div
      role="complementary"
      class="bg-purple-100 dark:bg-purple-900 p-3 rounded"
    >
      <strong>role="complementary"</strong> - Equivalent to &lt;aside&gt;
    </div>
    <div role="contentinfo" class="bg-gray-100 dark:bg-gray-900 p-3 rounded">
      <strong>role="contentinfo"</strong> - Equivalent to &lt;footer&gt;
    </div>
  </blockquote>
</ExampleCard>

<CategorySectionTitle id="generic-containers"
  >{t("sections.generic.title")}</CategorySectionTitle
>

<ExampleCard
  title={t("examples.generic.divs.title")}
  description={t("examples.generic.divs.desc")}
>
  <div class="space-y-4 text-zinc-900 dark:text-zinc-100">
    <div
      class="bg-red-50 dark:bg-red-900/20 border border-red-300 dark:border-red-600 p-3 rounded"
    >
      <strong>&lt;div&gt;</strong> - Generic container (no semantic meaning)
    </div>
    <div
      class="bg-red-50 dark:bg-red-900/20 border border-red-300 dark:border-red-600 p-3 rounded"
    >
      <strong>&lt;div&gt;</strong> - Another generic container
    </div>
    <p class="text-sm text-zinc-700 dark:text-zinc-300">
      {t("examples.generic.divs.note")}
    </p>
  </div>
</ExampleCard>

<CategorySectionTitle id="section-elements"
  >{t("sections.sectionElements.title")}</CategorySectionTitle
>

<ExampleCard
  title={t("examples.section.withHeading.title")}
  description={t("examples.section.withHeading.desc")}
>
  <section
    class="bg-zinc-50 dark:bg-zinc-800 p-4 rounded border border-zinc-200 dark:border-zinc-700"
    aria-labelledby="landmark-sections-about-our-services-sections"
  >
    <h4
      class="text-lg font-bold text-zinc-900 dark:text-zinc-100 mb-2"
      id="landmark-sections-about-our-services-sections"
    >
      About Our Services
    </h4>
    <p class="text-zinc-700 dark:text-zinc-300">
      {t("examples.section.withHeading.note")}
    </p>
  </section>
</ExampleCard>

<ExampleCard
  title={t("examples.section.noHeading.title")}
  description={t("examples.section.noHeading.desc")}
>
  <section
    class="bg-red-50 dark:bg-red-900/20 p-4 rounded border border-red-300 dark:border-red-600"
  >
    <p class="text-zinc-700 dark:text-zinc-300">
      <h4
        class="text-lg font-bold text-zinc-900 dark:text-zinc-100 mb-2"
        id="landmark-sections-about-our-services-sections"
      >
        About Our Services
      </h4>
      {t("examples.section.noHeading.note")}
    </p>
  </section>
</ExampleCard>

<CategorySectionTitle id="iframe-elements"
  >{t("sections.iframe.title")}</CategorySectionTitle
>

<ExampleCard
  title={t("examples.iframe.withTitle.title")}
  description={t("examples.iframe.withTitle.desc")}
>
  <iframe
    src="/a11y-visualizer/iframe-sample/"
    title="Sample content iframe"
    class="w-full h-80 border border-zinc-300 dark:border-zinc-600 rounded"
  >
  </iframe>
</ExampleCard>

<ExampleCard
  title={t("examples.iframe.noTitle.title")}
  description={t("examples.iframe.noTitle.desc")}
>
  <iframe
    src="/a11y-visualizer/iframe-no-title/"
    class="w-full h-80 border-red-300 dark:border-red-600 rounded border-2"
  >
  </iframe>
</ExampleCard>

<CategorySectionTitle id="dialog-modal"
  >{t("sections.dialog.title")}</CategorySectionTitle
>

<ExampleCard
  title={t("examples.dialog.element.title")}
  description={t("examples.dialog.element.desc")}
>
  <div class="space-y-4">
    <button
      id="open-dialog-btn"
      class="bg-teal-700 text-white px-4 py-2 rounded hover:bg-teal-800 transition-colors"
      onclick="document.getElementById('example-dialog').showModal()"
    >
      Open Dialog
    </button>

    <dialog
      id="example-dialog"
      class="p-6 rounded-lg shadow-lg backdrop:bg-black backdrop:bg-opacity-50"
    >
      <div class="space-y-4">
        <h3 class="text-lg font-bold text-zinc-700 dark:text-zinc-300">Example Dialog</h3>
        <p class="text-zinc-700 dark:text-zinc-300">
          This is a modal dialog opened with showModal().
        </p>
        <div class="flex gap-2">
          <button
            class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors"
            onclick="document.getElementById('example-dialog').close()"
          >
            Close
          </button>
        </div>
      </div>
    </dialog>
  </div>
</ExampleCard>

<ExampleCard
  title={t("examples.dialog.ariaModal.title")}
  description={t("examples.dialog.ariaModal.desc")}
>
  <div
    role="dialog"
    aria-modal="true"
    aria-labelledby="modal-title"
    class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden"
    id="custom-modal"
  >
    <div
      class="bg-white dark:bg-zinc-800 p-6 rounded-lg shadow-lg max-w-md w-full mx-4"
    >
      <h3
        id="modal-title"
        class="text-lg font-bold text-zinc-900 dark:text-zinc-100 mb-4"
      >
        Custom Modal
      </h3>
      <p class="text-zinc-700 dark:text-zinc-300 mb-4">
        This modal uses aria-modal="true" with proper focus management.
      </p>
      <div class="flex gap-2">
        <button
          id="modal-action-btn"
          class="bg-teal-700 text-white px-4 py-2 rounded hover:bg-teal-800 transition-colors"
        >
          Action
        </button>
        <button
          id="modal-close-btn"
          class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors"
        >
          Close
        </button>
      </div>
    </div>
  </div>

  <button
    id="open-custom-modal-btn"
    class="bg-teal-700 text-white px-4 py-2 rounded hover:bg-teal-800 transition-colors"
  >
    Open Custom Modal
  </button>

  <script>
    (function () {
      const modal = document.getElementById("custom-modal");
      const openBtn = document.getElementById("open-custom-modal-btn");
      const closeBtn = document.getElementById("modal-close-btn");
      let previousFocusElement = null;

      // モーダルを開く
      function openModal() {
        previousFocusElement = document.activeElement;
        modal?.classList.remove("hidden");

        // 最初のフォーカス可能な要素にフォーカス
        const firstFocusableElement = modal?.querySelector(
          'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])',
        );
        if (firstFocusableElement) {
          firstFocusableElement.focus();
        }
      }

      // モーダルを閉じる
      function closeModal() {
        modal?.classList.add("hidden");

        // フォーカスを開いたボタンに戻す
        if (previousFocusElement && previousFocusElement.focus) {
          previousFocusElement.focus();
        }
      }

      // フォーカストラップ
      function trapFocus(e) {
        if (!modal?.classList.contains("hidden")) {
          const focusableElements = modal?.querySelectorAll(
            'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])',
          );
          const firstElement = focusableElements?.[0];
          const lastElement = focusableElements?.[focusableElements.length - 1];

          if (e.key === "Tab") {
            if (e.shiftKey) {
              // Shift + Tab
              if (document.activeElement === firstElement) {
                e.preventDefault();
                lastElement?.focus();
              }
            } else {
              // Tab
              if (document.activeElement === lastElement) {
                e.preventDefault();
                firstElement?.focus();
              }
            }
          }

          // Escapeキーでモーダルを閉じる
          if (e.key === "Escape") {
            closeModal();
          }
        }
      }

      // イベントリスナー
      openBtn?.addEventListener("click", openModal);
      closeBtn?.addEventListener("click", closeModal);
      document.addEventListener("keydown", trapFocus);

      // モーダル外クリックで閉じる
      modal?.addEventListener("click", function (e) {
        if (e.target === modal) {
          closeModal();
        }
      });
    })();
  </script>
</ExampleCard>
