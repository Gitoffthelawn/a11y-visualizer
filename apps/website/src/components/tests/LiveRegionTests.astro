---
import CategoryTitle from "./CategoryTitle.astro";
import CategorySectionTitle from "./CategorySectionTitle.astro";
import ExampleCard from "./ExampleCard.astro";
import { createLocalT } from "../../lib/i18n";
import en from "./LiveRegionTests.lang.en";
import ja from "./LiveRegionTests.lang.ja";

interface Props {
  lang?: string;
}
const lang = (Astro.props as Props).lang || "en";
const t = createLocalT(lang === "ja" ? ja : en, en);
---

<CategoryTitle id="live-regions">{t("title")}</CategoryTitle>
<p class="text-zinc-700 dark:text-zinc-300 mb-6">{t("intro")}</p>

<CategorySectionTitle id="aria-live"
  >{t("sections.ariaLive.title")}</CategorySectionTitle
>

<ExampleCard
  title={t("examples.ariaLive.polite.title")}
  description={t("examples.ariaLive.polite.desc")}
>
  <div class="space-y-4">
    <div
      id="polite-region"
      aria-live="polite"
      class="bg-blue-50 dark:bg-blue-900/20 p-3 rounded border border-blue-200 dark:border-blue-700"
    >
      Status: Ready
    </div>
    <button
      class="bg-teal-700 text-white px-4 py-2 rounded hover:bg-teal-800 transition-colors"
      onclick="document.getElementById('polite-region').textContent = 'Status: Updated at ' + new Date().toLocaleTimeString()"
    >
      Update Status (Polite)
    </button>
  </div>
</ExampleCard>

<ExampleCard
  title={t("examples.ariaLive.assertive.title")}
  description={t("examples.ariaLive.assertive.desc")}
>
  <div class="space-y-4">
    <div
      id="assertive-region"
      aria-live="assertive"
      class="bg-red-50 dark:bg-red-900/20 p-3 rounded border border-red-200 dark:border-red-700 min-h-12"
    >
      <!-- Error messages will appear here -->
    </div>
    <button
      class="bg-zinc-600 text-white px-4 py-2 rounded hover:bg-zinc-700 transition-colors"
      onclick="document.getElementById('assertive-region').textContent = 'Error: Something went wrong! ' + new Date().toLocaleTimeString()"
    >
      Trigger Error (Assertive)
    </button>
    <button
      class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors"
      onclick="document.getElementById('assertive-region').textContent = ''"
    >
      Clear Error
    </button>
  </div>
</ExampleCard>

<CategorySectionTitle id="live-region-roles"
  >{t("sections.roles.title")}</CategorySectionTitle
>

<ExampleCard
  title={t("examples.roles.status.title")}
  description={t("examples.roles.status.desc")}
>
  <div class="space-y-4">
    <div
      id="status-region"
      role="status"
      class="bg-green-50 dark:bg-green-900/20 p-3 rounded border border-green-200 dark:border-green-700"
    >
      Form saved successfully
    </div>
    <button
      class="bg-teal-700 text-white px-4 py-2 rounded hover:bg-teal-800 transition-colors"
      onclick="document.getElementById('status-region').textContent = 'Form saved at ' + new Date().toLocaleTimeString()"
    >
      Save Form
    </button>
  </div>
</ExampleCard>

<ExampleCard
  title={t("examples.roles.alert.title")}
  description={t("examples.roles.alert.desc")}
>
  <div class="space-y-4">
    <div
      id="alert-region"
      role="alert"
      class="bg-orange-50 dark:bg-orange-900/20 p-3 rounded border border-orange-200 dark:border-orange-700 min-h-12"
    >
      <!-- Alerts will appear here -->
    </div>
    <button
      class="bg-zinc-600 text-white px-4 py-2 rounded hover:bg-zinc-700 transition-colors"
      onclick="document.getElementById('alert-region').textContent = 'Warning: Session expires in 5 minutes!'"
    >
      Show Warning
    </button>
  </div>
</ExampleCard>

<CategorySectionTitle id="output-element"
  >{t("sections.output.title")}</CategorySectionTitle
>

<ExampleCard
  title={t("examples.output.element.title")}
  description={t("examples.output.element.desc")}
>
  <div class="space-y-4">
    <fieldset class="border border-zinc-300 dark:border-zinc-600 rounded p-4">
      <legend class="text-zinc-900 dark:text-zinc-100 font-medium px-2"
        >Addition Calculator</legend
      >
      <div class="flex items-center gap-3 mt-2">
        <label for="num1" class="sr-only">First number</label>
        <input
          type="number"
          id="num1"
          value="5"
          class="border border-zinc-300 dark:border-zinc-600 rounded p-2 w-20 bg-white dark:bg-zinc-800 text-zinc-900 dark:text-zinc-100"
        />
        <span class="text-zinc-700 dark:text-zinc-300">+</span>
        <label for="num2" class="sr-only">Second number</label>
        <input
          type="number"
          id="num2"
          value="3"
          class="border border-zinc-300 dark:border-zinc-600 rounded p-2 w-20 bg-white dark:bg-zinc-800 text-zinc-900 dark:text-zinc-100"
        />
        <span class="text-zinc-700 dark:text-zinc-300">=</span>
        <output
          id="calc-output"
          class="bg-zinc-100 dark:bg-zinc-700 p-2 rounded text-zinc-900 dark:text-zinc-100 min-w-16 text-center"
        >
          8
        </output>
      </div>
    </fieldset>
    <button
      class="bg-teal-700 text-white px-4 py-2 rounded hover:bg-teal-800 transition-colors"
      onclick="
        const num1 = parseInt(document.getElementById('num1').value) || 0;
        const num2 = parseInt(document.getElementById('num2').value) || 0;
        document.getElementById('calc-output').textContent = num1 + num2;
      "
    >
      Calculate
    </button>
  </div>
</ExampleCard>

<CategorySectionTitle id="aria-atomic"
  >{t("sections.ariaAtomic.title")}</CategorySectionTitle
>

<ExampleCard
  title={t("examples.ariaAtomic.true.title")}
  description={t("examples.ariaAtomic.true.desc")}
>
  <div class="space-y-4">
    <div
      id="atomic-region"
      aria-live="polite"
      aria-atomic="true"
      class="bg-indigo-50 dark:bg-indigo-900/20 p-3 rounded border border-indigo-200 dark:border-indigo-700"
    >
      <span>Items in cart: </span>
      <strong id="cart-count">0</strong>
      <span> | Total: $</span>
      <strong id="cart-total">0.00</strong>
    </div>
    <button
      class="bg-teal-700 text-white px-4 py-2 rounded hover:bg-teal-800 transition-colors"
      onclick="
        const count = document.getElementById('cart-count');
        const total = document.getElementById('cart-total');
        const newCount = parseInt(count.textContent) + 1;
        count.textContent = newCount;
        total.textContent = (newCount * 10).toFixed(2);
      "
    >
      Add Item to Cart
    </button>
  </div>
</ExampleCard>

<CategorySectionTitle id="problematic-live-regions"
  >{t("sections.problematic.title")}</CategorySectionTitle
>

<ExampleCard
  title={t("examples.problematic.noLive.title")}
  description={t("examples.problematic.noLive.desc")}
>
  <div class="space-y-4">
    <div
      id="no-live-region"
      class="bg-red-50 dark:bg-red-900/20 p-3 rounded border border-red-300 dark:border-red-600"
    >
      Current time: <span id="current-time">Click button to see time</span>
    </div>
    <button
      class="bg-zinc-600 text-white px-4 py-2 rounded hover:bg-zinc-700 transition-colors"
      onclick="document.getElementById('current-time').textContent = new Date().toLocaleTimeString()"
    >
      Update Time (Silent)
    </button>
    <p class="text-sm text-zinc-700 dark:text-zinc-300">
      Screen readers won't announce the time update because this isn't a live
      region.
    </p>
  </div>
</ExampleCard>

<CategorySectionTitle id="priority-interactions"
  >{t("sections.priority.title")}</CategorySectionTitle
>

<ExampleCard
  title={t("examples.priority.simultaneous.title")}
  description={t("examples.priority.simultaneous.desc")}
>
  <div class="space-y-4">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div>
        <div
          id="polite-simultaneous"
          aria-live="polite"
          class="bg-blue-50 dark:bg-blue-900/20 p-3 rounded border border-blue-200 dark:border-blue-700 min-h-16"
        >
          Polite region: Waiting...
        </div>
        <p class="text-sm text-blue-700 dark:text-blue-300 mt-2">
          Polite (should be announced)
        </p>
      </div>
      <div>
        <div
          id="assertive-simultaneous"
          aria-live="assertive"
          class="bg-red-50 dark:bg-red-900/20 p-3 rounded border border-red-200 dark:border-red-700 min-h-16"
        >
          Assertive region: Waiting...
        </div>
        <p class="text-sm text-red-700 dark:text-red-300 mt-2">
          Assertive (will interrupt)
        </p>
      </div>
    </div>

    <div class="flex flex-wrap gap-2">
      <button
        id="update-both"
        class="bg-teal-700 text-white px-4 py-2 rounded hover:bg-teal-800 transition-colors"
      >
        Update Both Simultaneously
      </button>
      <button
        id="update-polite-only"
        class="bg-zinc-600 text-white px-4 py-2 rounded hover:bg-zinc-700 transition-colors"
      >
        Update Polite Only
      </button>
      <button
        id="update-assertive-only"
        class="bg-zinc-600 text-white px-4 py-2 rounded hover:bg-zinc-700 transition-colors"
      >
        Update Assertive Only
      </button>
      <button
        id="clear-both"
        class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors"
      >
        Clear Both
      </button>
    </div>

    <div
      class="bg-yellow-50 dark:bg-yellow-900/20 p-3 rounded border border-yellow-200 dark:border-yellow-700"
    >
      <p class="text-sm text-yellow-800 dark:text-yellow-200">
        <strong>Test behavior:</strong> Click "Update Both Simultaneously" and observe
        that the polite region's announcement may be suppressed by the assertive
        region. The Accessibility Visualizer extension shows this behavior by only
        displaying the assertive announcement when both regions update at the same
        time.
      </p>
    </div>
  </div>
</ExampleCard>

<ExampleCard
  title={t("examples.priority.sequential.title")}
  description={t("examples.priority.sequential.desc")}
>
  <div class="space-y-4">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div>
        <div
          id="polite-sequence"
          aria-live="polite"
          class="bg-green-50 dark:bg-green-900/20 p-3 rounded border border-green-200 dark:border-green-700 min-h-16"
        >
          Polite sequence: Ready
        </div>
        <p class="text-sm text-green-700 dark:text-green-300 mt-2">
          Polite announcements
        </p>
      </div>
      <div>
        <div
          id="assertive-sequence"
          aria-live="assertive"
          class="bg-orange-50 dark:bg-orange-900/20 p-3 rounded border border-orange-200 dark:border-orange-700 min-h-16"
        >
          Assertive sequence: Ready
        </div>
        <p class="text-sm text-orange-700 dark:text-orange-300 mt-2">
          Assertive interruptions
        </p>
      </div>
    </div>

    <div class="flex flex-wrap gap-2">
      <button
        id="start-polite-sequence"
        class="bg-teal-700 text-white px-4 py-2 rounded hover:bg-teal-800 transition-colors"
      >
        Start Polite Sequence (8 messages)
      </button>
      <button
        id="interrupt-with-assertive"
        class="bg-zinc-600 text-white px-4 py-2 rounded hover:bg-zinc-700 transition-colors"
      >
        Interrupt with Assertive
      </button>
      <button
        id="reset-sequence"
        class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors"
      >
        Reset
      </button>
    </div>

    <div
      class="bg-blue-50 dark:bg-blue-900/20 p-3 rounded border border-blue-200 dark:border-blue-700"
    >
      <p class="text-sm text-blue-800 dark:text-blue-200">
        <strong>Test behavior:</strong> Start the polite sequence to see 8 polite
        messages being displayed sequentially. Then click "Interrupt with Assertive"
        - the assertive message will be triggered after 3 seconds to avoid focusin
        clearing the live region display. Observe how the assertive announcement
        interrupts and clears the remaining polite messages.
      </p>
    </div>
  </div>
</ExampleCard>

<CategorySectionTitle id="aria-busy-suppression"
  >{t("sections.ariaBusy.title")}</CategorySectionTitle
>

<ExampleCard
  title={t("examples.ariaBusy.suppression.title")}
  description={t("examples.ariaBusy.suppression.desc")}
>
  <div class="space-y-4">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div>
        <div
          id="busy-region"
          aria-live="polite"
          class="bg-yellow-50 dark:bg-yellow-900/20 p-3 rounded border border-yellow-200 dark:border-yellow-700 min-h-16"
        >
          Status: Ready
        </div>
        <p class="text-sm text-yellow-700 dark:text-yellow-300 mt-2">
          Live region (will be suppressed when busy)
        </p>
      </div>
      <div>
        <div
          class="bg-gray-50 dark:bg-gray-800 p-3 rounded border border-gray-200 dark:border-gray-600"
        >
          <p class="text-sm font-medium text-gray-900 dark:text-gray-100">
            aria-busy status:
          </p>
          <p id="busy-status" class="text-sm text-gray-700 dark:text-gray-300">
            false
          </p>
        </div>
      </div>
    </div>

    <div class="flex flex-wrap gap-2">
      <button
        id="update-content"
        class="bg-teal-700 text-white px-4 py-2 rounded hover:bg-teal-800 transition-colors"
      >
        Update Content
      </button>
      <button
        id="toggle-busy"
        class="bg-zinc-600 text-white px-4 py-2 rounded hover:bg-zinc-700 transition-colors"
        aria-pressed="false"
      >
        Toggle aria-busy
      </button>
      <button
        id="reset-busy"
        class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors"
      >
        Reset
      </button>
    </div>

    <div
      class="bg-orange-50 dark:bg-orange-900/20 p-3 rounded border border-orange-200 dark:border-orange-700"
    >
      <p class="text-sm text-orange-800 dark:text-orange-200">
        <strong>Test behavior:</strong> Click "Update Content" to see normal live
        region announcements. Then click "Toggle aria-busy" to mark the region as
        busy, and try "Update Content" again - the content will change but no announcement
        will be made. The Accessibility Visualizer extension respects aria-busy and
        will not display announcements for busy regions.
      </p>
    </div>
  </div>
</ExampleCard>

<CategorySectionTitle id="continuous-live-regions"
  >{t("sections.continuous.title")}</CategorySectionTitle
>

<ExampleCard
  title={t("examples.continuous.timerPolite.title")}
  description={t("examples.continuous.timerPolite.desc")}
>
  <div class="space-y-4">
    <div
      id="timer-region"
      aria-live="polite"
      class="bg-blue-50 dark:bg-blue-900/20 p-3 rounded border border-blue-200 dark:border-blue-700"
    >
      Timer: <span id="timer-display">00:00</span>
    </div>
    <div class="flex gap-2">
      <button
        id="start-timer"
        class="bg-teal-700 text-white px-4 py-2 rounded hover:bg-teal-800 transition-colors"
      >
        Start Timer
      </button>
      <button
        id="stop-timer"
        class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors"
      >
        Stop Timer
      </button>
    </div>
  </div>
</ExampleCard>

<ExampleCard
  title={t("examples.continuous.counterAssertive.title")}
  description={t("examples.continuous.counterAssertive.desc")}
>
  <div class="space-y-4">
    <div
      id="counter-region"
      aria-live="assertive"
      class="bg-orange-50 dark:bg-orange-900/20 p-3 rounded border border-orange-200 dark:border-orange-700"
    >
      Counter: <span id="counter-display">0</span>
    </div>
    <div class="flex gap-2">
      <button
        id="start-counter"
        class="bg-zinc-600 text-white px-4 py-2 rounded hover:bg-zinc-700 transition-colors"
      >
        Start Counter
      </button>
      <button
        id="stop-counter"
        class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors"
      >
        Stop Counter
      </button>
    </div>
  </div>
</ExampleCard>

<ExampleCard
  title={t("examples.continuous.statusUpdates.title")}
  description={t("examples.continuous.statusUpdates.desc")}
>
  <div class="space-y-4">
    <div
      id="status-updates"
      role="status"
      class="bg-green-50 dark:bg-green-900/20 p-3 rounded border border-green-200 dark:border-green-700"
    >
      System Status: <span id="status-display">Initializing...</span>
    </div>
    <div class="flex gap-2">
      <button
        id="start-status"
        class="bg-teal-700 text-white px-4 py-2 rounded hover:bg-teal-800 transition-colors"
      >
        Start Status Updates
      </button>
      <button
        id="stop-status"
        class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors"
      >
        Stop Updates
      </button>
    </div>
  </div>
</ExampleCard>

<script>
  // Timer functionality
  let timerInterval = null;
  let timerSeconds = 0;

  function updateTimer() {
    const minutes = Math.floor(timerSeconds / 60);
    const seconds = timerSeconds % 60;
    const display = `${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
    document.getElementById("timer-display").textContent = display;
    timerSeconds++;
  }

  document.getElementById("start-timer").addEventListener("click", () => {
    if (!timerInterval) {
      timerInterval = setInterval(updateTimer, 1000);
    }
  });

  document.getElementById("stop-timer").addEventListener("click", () => {
    if (timerInterval) {
      clearInterval(timerInterval);
      timerInterval = null;
      timerSeconds = 0;
      document.getElementById("timer-display").textContent = "00:00";
    }
  });

  // Counter functionality
  let counterInterval = null;
  let counterValue = 0;

  function updateCounter() {
    counterValue++;
    document.getElementById("counter-display").textContent = counterValue;
  }

  document.getElementById("start-counter").addEventListener("click", () => {
    if (!counterInterval) {
      counterInterval = setInterval(updateCounter, 2000);
    }
  });

  document.getElementById("stop-counter").addEventListener("click", () => {
    if (counterInterval) {
      clearInterval(counterInterval);
      counterInterval = null;
      counterValue = 0;
      document.getElementById("counter-display").textContent = "0";
    }
  });

  // Status updates functionality
  let statusInterval = null;
  const statusMessages = [
    "System Status: Running",
    "System Status: Processing data",
    "System Status: Updating records",
    "System Status: Syncing files",
    "System Status: Backing up data",
    "System Status: Optimizing performance",
    "System Status: Ready",
  ];
  let statusIndex = 0;

  function updateStatus() {
    document.getElementById("status-display").textContent =
      statusMessages[statusIndex];
    statusIndex = (statusIndex + 1) % statusMessages.length;
  }

  document.getElementById("start-status").addEventListener("click", () => {
    if (!statusInterval) {
      statusInterval = setInterval(updateStatus, 3000);
    }
  });

  document.getElementById("stop-status").addEventListener("click", () => {
    if (statusInterval) {
      clearInterval(statusInterval);
      statusInterval = null;
      statusIndex = 0;
      document.getElementById("status-display").textContent = "Initializing...";
    }
  });

  // Priority interaction functionality - Simultaneous updates
  document.getElementById("update-both").addEventListener("click", () => {
    const timestamp = new Date().toLocaleTimeString();
    // Update both regions simultaneously to demonstrate priority behavior
    document.getElementById("polite-simultaneous").textContent =
      `Polite update: ${timestamp}`;
    document.getElementById("assertive-simultaneous").textContent =
      `Assertive update: ${timestamp}`;
  });

  document
    .getElementById("update-polite-only")
    .addEventListener("click", () => {
      const timestamp = new Date().toLocaleTimeString();
      document.getElementById("polite-simultaneous").textContent =
        `Polite update: ${timestamp}`;
    });

  document
    .getElementById("update-assertive-only")
    .addEventListener("click", () => {
      const timestamp = new Date().toLocaleTimeString();
      document.getElementById("assertive-simultaneous").textContent =
        `Assertive update: ${timestamp}`;
    });

  document.getElementById("clear-both").addEventListener("click", () => {
    document.getElementById("polite-simultaneous").textContent =
      "Polite region: Waiting...";
    document.getElementById("assertive-simultaneous").textContent =
      "Assertive region: Waiting...";
  });

  // Priority interaction functionality - Sequential updates
  let politeSequenceTimeout = null;
  let interruptTimeout = null;
  let sequenceStep = 0;

  function startPoliteSequence() {
    sequenceStep = 0;
    const politeMessages = [
      "Polite message 1: Initializing process...",
      "Polite message 2: Loading configuration...",
      "Polite message 3: Connecting to database...",
      "Polite message 4: Validating credentials...",
      "Polite message 5: Processing data...",
      "Polite message 6: Analyzing results...",
      "Polite message 7: Generating report...",
      "Polite message 8: Finalizing output...",
    ];

    function showNextMessage() {
      if (sequenceStep < politeMessages.length) {
        document.getElementById("polite-sequence").textContent =
          politeMessages[sequenceStep];
        sequenceStep++;
        politeSequenceTimeout = setTimeout(showNextMessage, 1500);
      } else {
        document.getElementById("polite-sequence").textContent =
          "Polite sequence: Complete";
      }
    }

    showNextMessage();
  }

  document
    .getElementById("start-polite-sequence")
    .addEventListener("click", () => {
      if (politeSequenceTimeout) {
        clearTimeout(politeSequenceTimeout);
      }
      if (interruptTimeout) {
        clearTimeout(interruptTimeout);
        interruptTimeout = null;
      }
      startPoliteSequence();
    });

  document
    .getElementById("interrupt-with-assertive")
    .addEventListener("click", () => {
      // Schedule assertive interruption after 3 seconds
      if (interruptTimeout) {
        clearTimeout(interruptTimeout);
      }

      document.getElementById("assertive-sequence").textContent =
        "Assertive interruption scheduled in 3 seconds...";

      interruptTimeout = setTimeout(() => {
        // Send assertive interruption
        const timestamp = new Date().toLocaleTimeString();
        document.getElementById("assertive-sequence").textContent =
          `URGENT: Critical error occurred at ${timestamp}`;

        // Clear ongoing polite sequence
        if (politeSequenceTimeout) {
          clearTimeout(politeSequenceTimeout);
          politeSequenceTimeout = null;
        }
        document.getElementById("polite-sequence").textContent =
          "Polite sequence: Interrupted by assertive message";

        interruptTimeout = null;
      }, 3000);
    });

  document.getElementById("reset-sequence").addEventListener("click", () => {
    if (politeSequenceTimeout) {
      clearTimeout(politeSequenceTimeout);
      politeSequenceTimeout = null;
    }
    if (interruptTimeout) {
      clearTimeout(interruptTimeout);
      interruptTimeout = null;
    }
    sequenceStep = 0;
    document.getElementById("polite-sequence").textContent =
      "Polite sequence: Ready";
    document.getElementById("assertive-sequence").textContent =
      "Assertive sequence: Ready";
  });

  // aria-busy suppression functionality
  let busyUpdateCounter = 0;

  function updateBusyStatus() {
    const busyRegion = document.getElementById("busy-region");
    const toggleButton = document.getElementById("toggle-busy");
    const isBusy = busyRegion.getAttribute("aria-busy") === "true";

    document.getElementById("busy-status").textContent = isBusy
      ? "true"
      : "false";
    toggleButton.setAttribute("aria-pressed", isBusy ? "true" : "false");
  }

  document.getElementById("update-content").addEventListener("click", () => {
    busyUpdateCounter++;
    const timestamp = new Date().toLocaleTimeString();
    const busyRegion = document.getElementById("busy-region");
    const isBusy = busyRegion.getAttribute("aria-busy") === "true";

    if (isBusy) {
      busyRegion.textContent = `Status: Update ${busyUpdateCounter} at ${timestamp} (suppressed)`;
    } else {
      busyRegion.textContent = `Status: Update ${busyUpdateCounter} at ${timestamp}`;
    }
  });

  document.getElementById("toggle-busy").addEventListener("click", () => {
    const busyRegion = document.getElementById("busy-region");
    const isBusy = busyRegion.getAttribute("aria-busy") === "true";

    if (isBusy) {
      busyRegion.removeAttribute("aria-busy");
    } else {
      busyRegion.setAttribute("aria-busy", "true");
    }
    updateBusyStatus();
  });

  document.getElementById("reset-busy").addEventListener("click", () => {
    const busyRegion = document.getElementById("busy-region");
    busyRegion.removeAttribute("aria-busy");
    busyRegion.textContent = "Status: Ready";
    busyUpdateCounter = 0;
    updateBusyStatus();
  });

  // Initialize busy status display
  updateBusyStatus();

  // Initialize clock for demonstration
  function updateTime() {
    const timeElement = document.getElementById("current-time");
    if (timeElement && timeElement.textContent === "Click button to see time") {
      timeElement.textContent = new Date().toLocaleTimeString();
    }
  }

  // Update time every second for demo
  setInterval(updateTime, 1000);
</script>
